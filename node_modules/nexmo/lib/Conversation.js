"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Conversations = function () {
  _createClass(Conversations, null, [{
    key: 'PATH',
    get: function get() {
      return '/beta/conversations';
    }

    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Additional Conversations options.
     */

  }]);

  function Conversations(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Conversations);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;
  }

  /**
   * TODO: document
   */


  _createClass(Conversations, [{
    key: 'create',
    value: function create(params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: 'api.nexmo.com',
        path: Conversations.PATH,
        method: 'POST',
        body: params,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * TODO: document
     */

  }, {
    key: 'get',
    value: function get(conversationId, callback) {
      var config;
      if (conversationId) {
        config = {
          host: 'api.nexmo.com',
          path: Conversations.PATH + '/' + conversationId,
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + this.creds.generateJwt()
          }
        };
      } else {
        config = {
          host: 'api.nexmo.com',
          path: Conversations.PATH,
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + this.creds.generateJwt()
          }
        };
      }

      this.options.httpClient.request(config, callback);
    }

    /**
     * TODO: document
     */

  }, {
    key: 'update',
    value: function update(conversationId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: 'api.nexmo.com',
        path: Conversations.PATH + '/' + conversationId,
        method: 'PUT',
        body: params,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }

    /**
     * TODO: document
     */

  }, {
    key: 'delete',
    value: function _delete(conversationId, callback) {
      var config = {
        host: 'api.nexmo.com',
        path: Conversations.PATH + '/' + conversationId,
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }
  }]);

  return Conversations;
}();

exports.default = Conversations;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJzYXRpb24uanMiXSwibmFtZXMiOlsiQ29udmVyc2F0aW9ucyIsImNyZWRlbnRpYWxzIiwib3B0aW9ucyIsImNyZWRzIiwiX25leG1vIiwibmV4bW9PdmVycmlkZSIsInBhcmFtcyIsImNhbGxiYWNrIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbmZpZyIsImhvc3QiLCJwYXRoIiwiUEFUSCIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiZ2VuZXJhdGVKd3QiLCJodHRwQ2xpZW50IiwicmVxdWVzdCIsImNvbnZlcnNhdGlvbklkIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7SUFFTUEsYTs7O3dCQUVjO0FBQ2hCLGFBQU8scUJBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7O0FBTUEseUJBQVlDLFdBQVosRUFBdUM7QUFBQSxRQUFkQyxPQUFjLHVFQUFKLEVBQUk7O0FBQUE7O0FBQ3JDLFNBQUtDLEtBQUwsR0FBYUYsV0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjs7QUFFQTtBQUNBLFNBQUtFLE1BQUwsR0FBYyxLQUFLRixPQUFMLENBQWFHLGFBQWIsbUJBQWQ7QUFDRDs7QUFFRDs7Ozs7OzsyQkFHT0MsTSxFQUFRQyxRLEVBQVU7QUFDdkJELGVBQVNFLEtBQUtDLFNBQUwsQ0FBZUgsTUFBZixDQUFUOztBQUVBLFVBQUlJLFNBQVM7QUFDWEMsY0FBTSxlQURLO0FBRVhDLGNBQU1aLGNBQWNhLElBRlQ7QUFHWEMsZ0JBQVEsTUFIRztBQUlYQyxjQUFNVCxNQUpLO0FBS1hVLGlCQUFTO0FBQ1AsMEJBQWdCLGtCQURUO0FBRVAsdUNBQTJCLEtBQUtiLEtBQUwsQ0FBV2MsV0FBWDtBQUZwQjtBQUxFLE9BQWI7QUFVQSxXQUFLZixPQUFMLENBQWFnQixVQUFiLENBQXdCQyxPQUF4QixDQUFnQ1QsTUFBaEMsRUFBd0NILFFBQXhDO0FBQ0Q7O0FBRUQ7Ozs7Ozt3QkFHSWEsYyxFQUFnQmIsUSxFQUFVO0FBQzVCLFVBQUlHLE1BQUo7QUFDQSxVQUFHVSxjQUFILEVBQW1CO0FBQ2pCVixpQkFBUztBQUNQQyxnQkFBSyxlQURFO0FBRVBDLGdCQUFRWixjQUFjYSxJQUF0QixTQUE4Qk8sY0FGdkI7QUFHUE4sa0JBQVEsS0FIRDtBQUlQRSxtQkFBUztBQUNQLDRCQUFnQixrQkFEVDtBQUVQLHlDQUEyQixLQUFLYixLQUFMLENBQVdjLFdBQVg7QUFGcEI7QUFKRixTQUFUO0FBU0QsT0FWRCxNQVVPO0FBQ0xQLGlCQUFTO0FBQ1BDLGdCQUFLLGVBREU7QUFFUEMsZ0JBQUtaLGNBQWNhLElBRlo7QUFHUEMsa0JBQVEsS0FIRDtBQUlQRSxtQkFBUztBQUNQLDRCQUFnQixrQkFEVDtBQUVQLHlDQUEyQixLQUFLYixLQUFMLENBQVdjLFdBQVg7QUFGcEI7QUFKRixTQUFUO0FBU0Q7O0FBRUQsV0FBS2YsT0FBTCxDQUFhZ0IsVUFBYixDQUF3QkMsT0FBeEIsQ0FBZ0NULE1BQWhDLEVBQXdDSCxRQUF4QztBQUNEOztBQUVEOzs7Ozs7MkJBR09hLGMsRUFBZ0JkLE0sRUFBUUMsUSxFQUFVO0FBQ3ZDRCxlQUFTRSxLQUFLQyxTQUFMLENBQWVILE1BQWYsQ0FBVDs7QUFFQSxVQUFJSSxTQUFTO0FBQ1RDLGNBQUssZUFESTtBQUVUQyxjQUFRWixjQUFjYSxJQUF0QixTQUE4Qk8sY0FGckI7QUFHVE4sZ0JBQVEsS0FIQztBQUlUQyxjQUFNVCxNQUpHO0FBS1RVLGlCQUFTO0FBQ1AsMEJBQWdCLGtCQURUO0FBRVAsdUNBQTJCLEtBQUtiLEtBQUwsQ0FBV2MsV0FBWDtBQUZwQjtBQUxBLE9BQWI7O0FBV0EsV0FBS2YsT0FBTCxDQUFhZ0IsVUFBYixDQUF3QkMsT0FBeEIsQ0FBZ0NULE1BQWhDLEVBQXdDSCxRQUF4QztBQUNEOztBQUVEOzs7Ozs7NEJBR09hLGMsRUFBZ0JiLFEsRUFBVTtBQUMvQixVQUFJRyxTQUFTO0FBQ1RDLGNBQUssZUFESTtBQUVUQyxjQUFRWixjQUFjYSxJQUF0QixTQUE4Qk8sY0FGckI7QUFHVE4sZ0JBQVEsUUFIQztBQUlURSxpQkFBUztBQUNQLDBCQUFnQixrQkFEVDtBQUVQLHVDQUEyQixLQUFLYixLQUFMLENBQVdjLFdBQVg7QUFGcEI7QUFKQSxPQUFiOztBQVVBLFdBQUtmLE9BQUwsQ0FBYWdCLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDVCxNQUFoQyxFQUF3Q0gsUUFBeEM7QUFDRDs7Ozs7O2tCQUlZUCxhIiwiZmlsZSI6IkNvbnZlcnNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgbmV4bW8gZnJvbSAnLi9pbmRleCc7XG5cbmNsYXNzIENvbnZlcnNhdGlvbnMge1xuXG4gIHN0YXRpYyBnZXQgUEFUSCgpIHtcbiAgICByZXR1cm4gJy9iZXRhL2NvbnZlcnNhdGlvbnMnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzXG4gICAqICAgIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgIEFkZGl0aW9uYWwgQ29udmVyc2F0aW9ucyBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZGVudGlhbHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkZW50aWFscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgLy8gVXNlZCB0byBmYWNpbGl0YXRlIHRlc3Rpbmcgb2YgdGhlIGNhbGwgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0XG4gICAgdGhpcy5fbmV4bW8gPSB0aGlzLm9wdGlvbnMubmV4bW9PdmVycmlkZSB8fCBuZXhtbztcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgY3JlYXRlKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBwYXJhbXMgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6ICdhcGkubmV4bW8uY29tJyxcbiAgICAgIHBhdGg6IENvbnZlcnNhdGlvbnMuUEFUSCxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgZ2V0KGNvbnZlcnNhdGlvbklkLCBjYWxsYmFjaykge1xuICAgIHZhciBjb25maWc7XG4gICAgaWYoY29udmVyc2F0aW9uSWQpIHtcbiAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgaG9zdDonYXBpLm5leG1vLmNvbScsXG4gICAgICAgIHBhdGg6YCR7Q29udmVyc2F0aW9ucy5QQVRIfS8ke2NvbnZlcnNhdGlvbklkfWAsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgaG9zdDonYXBpLm5leG1vLmNvbScsXG4gICAgICAgIHBhdGg6Q29udmVyc2F0aW9ucy5QQVRILFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgdXBkYXRlKGNvbnZlcnNhdGlvbklkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcGFyYW1zID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGhvc3Q6J2FwaS5uZXhtby5jb20nLFxuICAgICAgICBwYXRoOmAke0NvbnZlcnNhdGlvbnMuUEFUSH0vJHtjb252ZXJzYXRpb25JZH1gLFxuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICBib2R5OiBwYXJhbXMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBkZWxldGUoY29udmVyc2F0aW9uSWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgaG9zdDonYXBpLm5leG1vLmNvbScsXG4gICAgICAgIHBhdGg6YCR7Q29udmVyc2F0aW9ucy5QQVRIfS8ke2NvbnZlcnNhdGlvbklkfWAsXG4gICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udmVyc2F0aW9ucztcbiJdfQ==